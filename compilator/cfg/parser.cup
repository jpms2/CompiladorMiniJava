package main;

import java_cup.runtime.*;
import main.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.LinkedList;
import ast.*;
import visitor.*;
//class AnalisadorSintatico

parser code {:
  protected Lexer lexer;
:}

init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

terminal	String	LITERAL_INTEGER;
terminal	String	LITERAL_FLOAT;
terminal	String	IDENTIFIER;
terminal	String	COMMENT;
terminal			SEMICOLON, DOT,	COMMA, ASSIGN, PARENTHLEFT, PARENTHRIGHT, CURLBRACKETSLEFT, CURLBRACKETSRIGHT, BRACKETSLEFT, BRACKETSRIGHT, CLASS, PUBLIC, EXTENDS, STATIC, WHILE, IF, ELSE, RETURN, THIS, NEW, MAIN, LENGTH, SYSO, OR, AND, EQ, DIF, LT, LET, GT, GET, VOID, INT, BOOLEAN, STRING, TRUE, FALSE, PLUS, MINUS, MULT, DIV, MOD, NOT;
non terminal Program Program;
non terminal MainClass MainClass;
non terminal ClassDeclList ClassDeclaration;
non terminal VarDecl VarDeclaration;
non terminal MethodDecl MethodDeclaration;
non terminal Type Type;
non terminal Statement Statement;
non terminal Exp Expression;
non terminal Identifier Identifier;
non terminal String ExprExtra,ExprColchet,JavaMethods,ExprOp;
non terminal StatementList SubStatement,MethodStatement;	
non terminal VarDeclList MethodVarDecl,ClassVariables;
non terminal ExpList ExprFuncVar,SubExprFuncVar;
non terminal FormalList MethodInputExtr,MethodInpDecl;
non terminal MethodDeclList ClassMethods;

precedence left MULT,NOT,MINUS,PLUS;
precedence right BRACKETSLEFT,DOT,AND,LT, PARENTHRIGHT;

start with Program;

Program				::=	MainClass:mc ClassDeclaration:cd					{:RESULT = new Program(mc,cd); :};

MainClass			::=	CLASS Identifier:i CURLBRACKETSLEFT PUBLIC STATIC VOID MAIN PARENTHLEFT STRING BRACKETSLEFT BRACKETSRIGHT Identifier:i2 PARENTHRIGHT CURLBRACKETSLEFT Statement:st CURLBRACKETSRIGHT CURLBRACKETSRIGHT
																			{: RESULT = new MainClass(i,i2,st); :};

ClassDeclaration	::=	ClassDeclaration:c CLASS Identifier:i EXTENDS Identifier:ex CURLBRACKETSLEFT ClassVariables:cv ClassMethods:cm CURLBRACKETSRIGHT
																			{: ClassDeclList nk = new ClassDeclList();
																				if(c!=null){
																					for(int a = 0; a < c.size(); a++){
																						nk.addElement(c.elementAt(a));	
																					}
																				}
																				nk.addElement(new ClassDeclExtends(i,ex,cv,cm));
																				RESULT = nk; :}
					|	ClassDeclaration:c1 CLASS Identifier:i CURLBRACKETSLEFT ClassVariables:cv ClassMethods:cm CURLBRACKETSRIGHT 
																			{: 	ClassDeclList nk = new ClassDeclList();
																				if(c1!=null){
																					for(int a = 0; a < c1.size(); a++){
																						nk.addElement(c1.elementAt(a));	
																					}
																				}
																				nk.addElement(new ClassDeclSimple(i,cv,cm));
																				RESULT = nk;	:}
					|														{:	RESULT =  new ClassDeclList(); :};

ClassVariables		::=	VarDeclaration:v ClassVariables:c					{: 	VarDeclList nk = new VarDeclList();
																				nk.addElement(v);
																				if(c!=null){
																					for(int a = 0; a < c.size(); a++){
																						nk.addElement(c.elementAt(a));	
																					}
																				}
																				RESULT = nk; :}
					|														{: RESULT = new VarDeclList(); :};

ClassMethods		::= MethodDeclaration:m ClassMethods:c					{: MethodDeclList nk = new MethodDeclList();
																				nk.addElement(m);
																				if(c!=null){
																					for(int a = 0; a < c.size(); a++){
																						nk.addElement(c.elementAt(a));	
																					}
																				}
																				RESULT = nk; :}
					|														{: RESULT = new MethodDeclList(); :};


VarDeclaration		::=	Type:t Identifier:i SEMICOLON						{: RESULT = new VarDecl(t,i); :};

MethodDeclaration	::=	PUBLIC Type:t Identifier:i PARENTHLEFT MethodInpDecl:m PARENTHRIGHT CURLBRACKETSLEFT MethodVarDecl:v MethodStatement:s RETURN Expression:ex SEMICOLON CURLBRACKETSRIGHT
																			{: RESULT = new MethodDecl(t,i,m,v,s,ex); :};

MethodInpDecl		::=	Type:t Identifier:i MethodInputExtr:m				{:	FormalList nk = new FormalList();
																				nk.addElement(new Formal(t,i));
																				if(m!=null){
																				for(int a = 0; a < m.size(); a++){
																					nk.addElement(m.elementAt(a));	
																					}
																				}
																				RESULT = nk; :}
					|														{:	RESULT = new FormalList(); :};

MethodInputExtr		::= COMMA Type:t Identifier:i MethodInputExtr:m		{:	FormalList nk = new FormalList();
																				nk.addElement(new Formal(t,i));
																				if(m!=null){
																					for(int a = 0; a < m.size(); a++){
																						nk.addElement(m.elementAt(a));	
																					}
																				}
																				RESULT = nk; :}
					|														{:	RESULT = new FormalList(); :};

MethodVarDecl		::= MethodVarDecl:m VarDeclaration:v					{: 	VarDeclList ak = new VarDeclList();
																				if(m!=null){
																					for(int a = 0; a < m.size(); a++){
																						ak.addElement(m.elementAt(a));	
																					}
																				}
																				ak.addElement(v);
																				RESULT = ak; :}							
					|														{:	RESULT = new VarDeclList(); :};

MethodStatement		::= Statement:s MethodStatement:m						{:	StatementList stmtList = new StatementList(); 
																				stmtList.addElement(s);
																				if(m!=null){
																					for(int a = 0; a < m.size(); a++){
																						stmtList.addElement(m.elementAt(a));	
																					}
																				}
																				RESULT = stmtList; :}
					|														{:	RESULT = new StatementList();; :};

Type				::=	INT BRACKETSLEFT BRACKETSRIGHT						{:	RESULT = new IntArrayType(); :}
					|	BOOLEAN												{:	RESULT = new BooleanType(); :}
					|	INT													{:	RESULT = new IntegerType(); :}		
					|	Identifier:i										{:	RESULT = new IdentifierType(i.toString()); :};

Statement			::=	CURLBRACKETSLEFT SubStatement:s CURLBRACKETSRIGHT	{: RESULT = new Block(s); :}
					|	IF PARENTHLEFT Expression:e PARENTHRIGHT Statement:s1 ELSE Statement:s2	
																			{: RESULT = new If(e,s1,s2); :}
					|	WHILE PARENTHLEFT Expression:e PARENTHRIGHT Statement:s
																			{: RESULT = new While(e,s); :}				
					|	SYSO PARENTHLEFT Expression:e PARENTHRIGHT SEMICOLON{: RESULT = new Print(e); :}
					|	Identifier:i ASSIGN Expression:e SEMICOLON			{: RESULT = new Assign(i,e); :}
					|	Identifier:i BRACKETSLEFT Expression:e BRACKETSRIGHT ASSIGN Expression:d SEMICOLON	
																			{: RESULT = new ArrayAssign(i,e,d); :};

SubStatement		::=	Statement:s SubStatement:sa							{: 	StatementList 	stmtList = new StatementList(); 
																				stmtList.addElement(s);
																				if(sa!=null){
																					for(int a = 0; a < sa.size(); a++){
																						stmtList.addElement(sa.elementAt(a));	
																					}
																				}
																				RESULT = stmtList; :}
					|														{:	RESULT = new StatementList(); :};

Expression			::=	Expression:e DOT LENGTH								{:	RESULT = new ArrayLength(e); :}
					|	Expression:e1 DOT Identifier:i PARENTHLEFT ExprFuncVar:e2 PARENTHRIGHT	
																			{:	RESULT = new Call(e1,i,e2); :}
					|	Expression:e1 PLUS Expression:e2					{:	RESULT = new Plus(e1,e2); :}
					|	Expression:e1 AND Expression:e2						{:	RESULT = new And(e1,e2); :}
					|	Expression:e1 LT Expression:e2						{:	RESULT = new LessThan(e1,e2); :}
					|	Expression:e1 MINUS Expression:e2					{:	RESULT = new Minus(e1,e2); :}
					|	Expression:e1 MULT Expression:e2					{:	RESULT = new Times(e1,e2); :}
					|	Expression:e1 BRACKETSLEFT Expression:e2 BRACKETSRIGHT	
																			{:	RESULT = new ArrayLookup(e1,e2); :}
					|	LITERAL_INTEGER:l									{:	RESULT = new IntegerLiteral(Integer.parseInt(l)); :}
					|	TRUE												{:	RESULT = new True(); :}
					|	FALSE												{:	RESULT = new False(); :}
					|	IDENTIFIER:i										{:	RESULT = new IdentifierExp(i); :}
					|	THIS												{:	RESULT = new This(); :}
					|	NEW INT BRACKETSLEFT Expression:e BRACKETSRIGHT		{:	RESULT = new NewArray(e); :}
					|	NEW Identifier:i PARENTHLEFT PARENTHRIGHT			{:	RESULT = new NewObject(i); :}
					|	NOT Expression:e									{:	RESULT = new Not(e); :}
					|	PARENTHLEFT Expression:e PARENTHRIGHT				{:	RESULT = e; :};

ExprFuncVar			::=	Expression:e SubExprFuncVar:f						{:	ExpList exprList = new ExpList();
																		exprList.addElement(e);
																		if(f!=null){
																			for(int a = 0; a < f.size(); a++){
																				exprList.addElement(f.elementAt(a));	
																			}
																		}
																		RESULT = exprList; :}
			|														{:	RESULT = new ExpList(); :};

SubExprFuncVar		::=	COMMA Expression:e SubExprFuncVar:f		{:	ExpList exprList = new ExpList();
																	exprList.addElement(e);
																		if(f!=null){
																			for(int a = 0; a < f.size(); a++){
																				exprList.addElement(f.elementAt(a));	
																			}
																		}
																		RESULT = exprList; :}
			|														{:	RESULT = new ExpList(); :};

Identifier			::=	IDENTIFIER:e										{:	RESULT = new Identifier((String) e); :}; 
